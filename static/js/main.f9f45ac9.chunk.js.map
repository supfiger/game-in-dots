{"version":3,"sources":["components/Board/Board.js","components/Dot/Dot.js","components/Field/Field.js","components/Game/Game.js","components/Message/Message.js","components/Panel/Panel.js","api.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","winnersList","loadingWinners","isGameFinished","showWinnersList","length","listItemStyles","winnersListItem","highlightLastWinner","className","type","color","height","width","map","item","key","id","classNames","winner","date","Dot","onClick","field","dotSize","small","middle","big","Field","fieldDots","dot","onClickDot","Game","onChangeGameMode","e","a","gameSettings","gameMode","target","value","state","isGameStarted","resetState","setState","delay","createFieldDots","onChangeName","user","onClickPlay","onStartGame","max","i","clicked","uniqueRandomNumbers","sampleSize","range","currentDotIndex","timer","setInterval","checkIsGameFinished","onFinishGame","clearInterval","generateRandomDot","lastNumber","points","updatedFieldDots","updatedPoints","prevNumber","prevDot","computer","newLastNumber","pop","currentDot","makeLastDotRed","lastDot","Math","floor","publishWinnerToBoard","dataToPublish","uploadWinner","Date","winnerTime","toLocaleString","hour","minute","getDate","month","getFullYear","onPublishWinner","currentState","this","loadingSettings","componentProps","contentStyles","content","isGameModePicked","Component","Message","messageStyles","messageVisible","Panel","disablePlayButton","onChange","disabled","Object","keys","placeholder","requestURL","fetch","method","response","json","result","console","error","winnersGet","publishWinner","body","JSON","stringify","headers","App","fetchWinners","reverse","fetchGameSettings","setPublishWinner","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f9f45ac9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport classNames from \"classnames\";\r\n\r\nimport \"./Board.sass\";\r\n\r\nconst Board = (props) => {\r\n  const { winnersList, loadingWinners, isGameFinished } = props;\r\n  const showWinnersList = winnersList && winnersList.length > 0;\r\n  const listItemStyles = {\r\n    winnersListItem: true,\r\n    highlightLastWinner: isGameFinished,\r\n  };\r\n\r\n  return (\r\n    <div className=\"Board\">\r\n      <h2 className=\"boardTitle\">Leader Board</h2>\r\n      {loadingWinners && !isGameFinished && (\r\n        <Loader type=\"TailSpin\" color=\"#00BFFF\" height={60} width={60} />\r\n      )}\r\n      {showWinnersList && (\r\n        <ul className=\"winnersList\">\r\n          {winnersList.map((item) => (\r\n            <li key={item.id} className={classNames(listItemStyles)}>\r\n              <div className=\"winnerUsername\">{item.winner}</div>\r\n              <div className=\"winnerDate\">{item.date}</div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport \"./Dot.sass\";\r\n\r\nconst Dot = (props) => {\r\n  const { onClick, color, field } = props;\r\n  const dotSize = {\r\n    small: field === 15,\r\n    middle: field === 10,\r\n    big: field === 5,\r\n  };\r\n\r\n  return <li className={classNames(\"Dot\", color, dotSize)} onClick={onClick} />;\r\n};\r\n\r\nexport default Dot;\r\n","import React from \"react\";\r\n\r\nimport \"./Field.sass\";\r\nimport { Dot } from \"../index\";\r\n\r\nconst Field = (props) => {\r\n  const { field, fieldDots } = props;\r\n\r\n  return (\r\n    <div className=\"Field\">\r\n      {field && (\r\n        <ul className=\"grid\">\r\n          {fieldDots.map((dot) => (\r\n            <Dot\r\n              key={dot.id}\r\n              onClick={() => props.onClickDot(dot.id)}\r\n              {...dot}\r\n              field={field}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import React, { Component } from \"react\";\r\nimport { sampleSize, range } from \"lodash\";\r\nimport classNames from \"classnames\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nimport \"./Game.sass\";\r\nimport { Panel, Message, Field } from \"../index\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: \"\",\r\n      winner: null,\r\n      gameMode: \"DEFAULT\",\r\n      isGameStarted: false,\r\n      isGameFinished: false,\r\n      field: null,\r\n      delay: null,\r\n      max: null,\r\n      fieldDots: [],\r\n      dataToPublish: {},\r\n      lastNumber: null,\r\n      points: {\r\n        computer: [],\r\n        user: [],\r\n      },\r\n    };\r\n  }\r\n\r\n  onChangeGameMode = async (e) => {\r\n    const {\r\n      props: { gameSettings },\r\n    } = this;\r\n    const gameMode = e.target.value;\r\n\r\n    // Abort the game when the game mode changed\r\n    if (this.state.isGameStarted) {\r\n      await this.resetState();\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        gameMode,\r\n        field: gameSettings[gameMode].field,\r\n        delay: gameSettings[gameMode].delay,\r\n      },\r\n      () => this.createFieldDots()\r\n    );\r\n  };\r\n\r\n  onChangeName = (e) => {\r\n    this.setState({ user: e.target.value });\r\n  };\r\n\r\n  onClickPlay = () => {\r\n    const { isGameStarted, isGameFinished } = this.state;\r\n\r\n    if (isGameFinished) {\r\n      this.createFieldDots();\r\n    }\r\n\r\n    if (!isGameStarted) {\r\n      this.setState(\r\n        {\r\n          isGameStarted: true,\r\n          isGameFinished: false,\r\n        },\r\n        () => this.onStartGame()\r\n      );\r\n    }\r\n  };\r\n\r\n  createFieldDots = () => {\r\n    const { field } = this.state;\r\n    let fieldDots = [];\r\n    const max = field ** 2;\r\n\r\n    // Adding dots to the array with own properties\r\n    for (let i = 0; i < max; i++) {\r\n      fieldDots[i] = {\r\n        color: \"initial\",\r\n        clicked: false,\r\n        id: i,\r\n      };\r\n    }\r\n\r\n    this.setState({\r\n      fieldDots,\r\n      max,\r\n      field,\r\n    });\r\n  };\r\n\r\n  onStartGame = () => {\r\n    const { delay, max } = this.state;\r\n\r\n    // Creating an array of random unique numbers (from 0 to max)\r\n    const uniqueRandomNumbers = sampleSize(range(0, max), max);\r\n\r\n    // Setting interval for generate a new random dot\r\n    let currentDotIndex = 0;\r\n    const timer = setInterval(() => {\r\n      currentDotIndex++;\r\n      const abortTimer = this.checkIsGameFinished(currentDotIndex);\r\n      if (abortTimer) {\r\n        this.onFinishGame();\r\n        clearInterval(timer);\r\n      } else {\r\n        this.generateRandomDot(uniqueRandomNumbers);\r\n      }\r\n    }, delay);\r\n  };\r\n\r\n  generateRandomDot = (uniqueRandomNumbers) => {\r\n    const {\r\n      isGameStarted,\r\n      isGameFinished,\r\n      fieldDots,\r\n      lastNumber,\r\n      points,\r\n    } = this.state;\r\n\r\n    // Creating and displaying a new random blue dot and change it to red,\r\n    // when it has not been pressed for the time period \"delay\"\r\n    if (isGameStarted && !isGameFinished) {\r\n      const updatedFieldDots = [...fieldDots];\r\n      let updatedPoints = { ...points };\r\n      const prevNumber = lastNumber;\r\n      const prevDot = updatedFieldDots[lastNumber];\r\n\r\n      // Making a red dot for a prev number\r\n      if (prevNumber !== null && prevDot.color !== \"green\") {\r\n        updatedFieldDots[prevDot.id] = {\r\n          ...prevDot,\r\n          color: \"red\",\r\n        };\r\n        updatedPoints = {\r\n          ...updatedPoints,\r\n          computer: [...updatedPoints.computer, prevDot.id],\r\n        };\r\n      }\r\n\r\n      const newLastNumber = uniqueRandomNumbers.pop();\r\n      const updatedCurrentDot = updatedFieldDots[newLastNumber];\r\n      updatedCurrentDot.color = \"blue\";\r\n\r\n      this.setState({\r\n        fieldDots: updatedFieldDots,\r\n        lastNumber: newLastNumber,\r\n        points: updatedPoints,\r\n      });\r\n    }\r\n  };\r\n\r\n  onClickDot = (id) => {\r\n    const { fieldDots, points, lastNumber } = this.state;\r\n\r\n    let updatedPoints = { ...points };\r\n    let updatedFieldDots = [...fieldDots];\r\n    let currentDot = updatedFieldDots[lastNumber];\r\n\r\n    // Changing dot color to blue and set a point to user when he clicked to blue dot\r\n    if (id === lastNumber && currentDot.clicked === false) {\r\n      currentDot.color = \"green\";\r\n      currentDot.clicked = true;\r\n\r\n      updatedPoints = {\r\n        ...updatedPoints,\r\n        user: [...updatedPoints.user, lastNumber],\r\n      };\r\n\r\n      this.setState({\r\n        fieldDots: updatedFieldDots,\r\n        points: updatedPoints,\r\n      });\r\n    }\r\n  };\r\n\r\n  makeLastDotRed = () => {\r\n    const { lastNumber, points, fieldDots } = this.state;\r\n    const updatedFieldDots = [...fieldDots];\r\n    let updatedPoints = { ...points };\r\n    const lastDot = updatedFieldDots[lastNumber];\r\n\r\n    if (lastNumber !== null && lastDot.color !== \"green\") {\r\n      updatedFieldDots[lastDot.id] = {\r\n        ...lastDot,\r\n        color: \"red\",\r\n      };\r\n      updatedPoints = {\r\n        ...updatedPoints,\r\n        computer: [...updatedPoints.computer, lastDot.id],\r\n      };\r\n    }\r\n\r\n    this.setState({\r\n      fieldDots: updatedFieldDots,\r\n      points: updatedPoints,\r\n    });\r\n  };\r\n\r\n  onFinishGame = async () => {\r\n    const { points, max, user } = this.state;\r\n\r\n    if (points.computer.length === Math.floor(max / 2)) {\r\n      this.setState({\r\n        winner: \"computer\",\r\n        isGameFinished: true,\r\n      });\r\n    }\r\n\r\n    if (points.user.length === Math.floor(max / 2)) {\r\n      this.setState({\r\n        winner: user,\r\n        isGameFinished: true,\r\n      });\r\n    }\r\n\r\n    await this.makeLastDotRed();\r\n    if (this.state.winner !== null) {\r\n      await this.publishWinnerToBoard();\r\n    }\r\n    this.resetState();\r\n  };\r\n\r\n  checkIsGameFinished = (currentDotIndex) => {\r\n    const { points, max } = this.state;\r\n    return (\r\n      points.computer.length === Math.floor(max / 2) ||\r\n      points.user.length === Math.floor(max / 2) ||\r\n      !this.state.isGameStarted ||\r\n      currentDotIndex === max\r\n    );\r\n  };\r\n\r\n  resetState = () => {\r\n    const resetState = {\r\n      isGameStarted: false,\r\n      lastNumber: null,\r\n      dataToPublish: {},\r\n      points: {\r\n        computer: [],\r\n        user: [],\r\n      },\r\n    };\r\n\r\n    this.setState({\r\n      ...resetState,\r\n    });\r\n  };\r\n\r\n  publishWinnerToBoard = () => {\r\n    const { dataToPublish, winner, isGameFinished } = this.state;\r\n    let uploadWinner = { ...dataToPublish };\r\n\r\n    const date = new Date();\r\n    const winnerTime = `${date.toLocaleString(\"default\", {\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    })}; ${date.getDate()} ${date.toLocaleString(\"en\", {\r\n      month: \"long\",\r\n    })} ${date.getFullYear()}`;\r\n\r\n    uploadWinner.winner = winner;\r\n    uploadWinner.date = winnerTime;\r\n\r\n    //Added const for cancel loading spinner at leaderboard\r\n    // const removeLoading = false;\r\n\r\n    this.props.onPublishWinner(uploadWinner, isGameFinished);\r\n  };\r\n\r\n  render() {\r\n    const currentState = this.state;\r\n    const { gameSettings, loadingSettings } = this.props;\r\n    const componentProps = { ...currentState, gameSettings };\r\n    const contentStyles = {\r\n      content: true,\r\n      isGameModePicked: this.state.gameMode !== \"DEFAULT\",\r\n    };\r\n\r\n    return (\r\n      <div className=\"Game\">\r\n        <h1 className=\"gameTitle\">Game in dots</h1>\r\n        {loadingSettings ? (\r\n          <Loader type=\"TailSpin\" color=\"#00BFFF\" height={60} width={60} />\r\n        ) : (\r\n          <div className={classNames(contentStyles)}>\r\n            <Panel\r\n              {...componentProps}\r\n              onChangeGameMode={this.onChangeGameMode}\r\n              onChangeName={this.onChangeName}\r\n              onClickPlay={this.onClickPlay}\r\n            />\r\n            <Message {...componentProps} />\r\n            <Field {...componentProps} onClickDot={this.onClickDot} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport \"./Message.sass\";\r\n\r\nconst Message = (props) => {\r\n  const { isGameFinished, winner } = props;\r\n\r\n  const messageStyles = {\r\n    Message: true,\r\n    messageVisible: winner !== null && winner !== \"\",\r\n  };\r\n\r\n  return (\r\n    <div className={classNames(messageStyles)}>\r\n      {isGameFinished && (\r\n        <Fragment>\r\n          <span>{winner}</span> won\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\nimport \"./Panel.sass\";\r\n\r\nconst Panel = (props) => {\r\n  const { gameMode, gameSettings, isGameStarted, isGameFinished, user } = props;\r\n  const disablePlayButton =\r\n    gameMode === \"DEFAULT\" || user === \"\" || isGameStarted;\r\n\r\n  return (\r\n    <div className=\"Panel\">\r\n      <div className=\"gameMode\">\r\n        <select value={gameMode} onChange={props.onChangeGameMode}>\r\n          <option value=\"DEFAULT\" disabled>\r\n            Pick game mode...\r\n          </option>\r\n          {Object.keys(gameSettings).map((item) => (\r\n            <option value={item} key={item}>\r\n              {item}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"inputName\">\r\n        <input\r\n          value={user}\r\n          onChange={props.onChangeName}\r\n          type=\"text\"\r\n          placeholder=\"Enter your user\"\r\n        />\r\n      </div>\r\n      <button\r\n        className=\"playButton\"\r\n        onClick={props.onClickPlay}\r\n        disabled={disablePlayButton}\r\n      >\r\n        {isGameFinished ? `PLAY AGAIN` : `PLAY`}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Panel;\r\n","const requestURL = \"https://starnavi-frontend-test-task.herokuapp.com\";\r\n\r\nexport const gameSettings = async () => {\r\n  try {\r\n    let response = await fetch(requestURL + \"/game-settings\", {\r\n      method: \"GET\",\r\n    });\r\n    let result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Ошибка\", error);\r\n  }\r\n};\r\n\r\nexport const winnersGet = async () => {\r\n  try {\r\n    let response = await fetch(requestURL + \"/winners\", {\r\n      method: \"GET\",\r\n    });\r\n    let result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Ошибка\", error);\r\n  }\r\n};\r\n\r\nexport const publishWinner = async (body) => {\r\n  try {\r\n    let response = await fetch(requestURL + \"/winners\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    let result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"Ошибка\", error);\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./App.sass\";\r\nimport { Game, Board } from \"./components/index\";\r\nimport { gameSettings, winnersGet, publishWinner } from \"./api.js\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      winnersList: {},\r\n      gameSettings: {},\r\n      loadingWinners: false,\r\n      loadingSettings: false,\r\n      isGameFinished: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchGameSettings();\r\n    this.fetchWinners();\r\n  }\r\n\r\n  fetchWinners = async () => {\r\n    this.setState({ loadingWinners: true });\r\n    try {\r\n      const result = await winnersGet();\r\n      this.setState({\r\n        winnersList: result.reverse(),\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      this.setState({ loadingWinners: false });\r\n    }\r\n  };\r\n\r\n  fetchGameSettings = async () => {\r\n    this.setState({ loadingSettings: true });\r\n    try {\r\n      const result = await gameSettings();\r\n      this.setState({\r\n        gameSettings: result,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      this.setState({ loadingSettings: false });\r\n    }\r\n  };\r\n\r\n  setPublishWinner = async (data) => {\r\n    try {\r\n      await publishWinner(data);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  onPublishWinner = async (data, isGameFinished) => {\r\n    await this.setPublishWinner(data);\r\n    this.fetchWinners();\r\n    this.setState({\r\n      isGameFinished,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      winnersList,\r\n      gameSettings,\r\n      loadingSettings,\r\n      loadingWinners,\r\n      isGameFinished,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Game\r\n          loadingSettings={loadingSettings}\r\n          gameSettings={gameSettings}\r\n          onPublishWinner={this.onPublishWinner}\r\n        />\r\n        <Board\r\n          loadingWinners={loadingWinners}\r\n          winnersList={winnersList}\r\n          isGameFinished={isGameFinished}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}